#!/usr/bin/env node



var token = 'bb3d070c1c734f4bbe3d91096a6c6876';
var Blynk = require("blynk-library");
var blynk = new Blynk.Blynk(token);
   
blynk.on('connect', function() {
  console.log("Blynk  ready."); // connected to server
});

//----------------------------------------------------

// Some functions need nodejs to be started as sudo !!!
sudo = (parseInt(process.env.SUDO_UID)>=1000);   // test if sudo
console.log("SUDO =",sudo);

// GPIO use:  OnOff used internally in blynk-library ONLY for plain GPIO outputs
//            OnOff is basic, and can't even do input pullups, so we don't use it below in our code
//            We use Rpio for regular GPIO I/O without sudo
//            Rpio can also be run in sudo mode, and more functions become available (pwm/i2c/spi)
//            PiGpio always needs sudo but can do even fancier things like servo and ultrasonic
var rpio = require('rpio');
if (sudo) {
    // init the more competent functions if sudo. Load pigpio and upgrade rpio
    var piGpio = require('pigpio').Gpio;   
    // ALL pigpio needs sudo. servo & ultrasonic
    // https://www.npmjs.com/package/pigpio
    rpio.init({gpiomem: false, mapping: 'gpio'});  
    // refer https://www.npmjs.com/package/rpio
} 
else {
    rpio.init({gpiomem: true, mapping: 'gpio'});  // gpiomem mode for non-sudo, some functions n/a
}
// all gpio numbering is BCM



//-----------------------

// Pre-make a few handy Vxx ("virtual pin") variables for blynk:
for (v=0; v<=20; v++) 
    eval("var V" + v + " = new blynk.VirtualPin(" + v + ");");  // -> V0 to V20
    
//-----------------------------------



// init oled

var oled = require('oled-rpi');
var opts = {height: 64};
var oled = new oled(opts);

var OL = (typeof(oled) === 'object');

if(OL) oled.clearDisplay(false);  
// note we now can safely with "if(OL) ..." call any oled functions even if no oled!


// show some stuff on it
//if(OL) oled.fillRect(1, 1, 10, 20, 1);
if(OL) oled.setCursor(15,30);
if(OL) oled.writeString("Hello", 3);


//--------------------------

// 4 input buttons with pullup:

var but1=13, but2=6, but3=26, but4=19;
rpio.open(but1, rpio.INPUT, rpio.PULL_UP); 
rpio.open(but2, rpio.INPUT, rpio.PULL_UP); 
rpio.open(but3, rpio.INPUT, rpio.PULL_UP); 
rpio.open(but4, rpio.INPUT, rpio.PULL_UP);  

// blynk doesn't seem to natively read the gpio pins, so we use a virtual pin each. Use 1 2 3 4 to be simple.

V1.on('read', function() { V1.write(1-rpio.read(but1)); });
V2.on('read', function() { V2.write(1-rpio.read(but2)); });
V3.on('read', function() { V3.write(1-rpio.read(but3)); });
V4.on('read', function() { V4.write(1-rpio.read(but4)); });



//-------------------------------

// LEDs for on/off

// red led on gpio 21,   green on 20,   blue on 16
// blynk seems to write to output gpios natively,  using PIN GPIO addresses on APP.
// so we have nothing to code !!!

//-------------------------

// 1 LED for PWM control  - we use pigpio module which needs sudo operation
var pwmvalu=0;

if(sudo) {
    var blueled = new piGpio(16, {mode: piGpio.OUTPUT});   // the pigpio object at pin 16, the blue led
    blueled.pwmWrite(0);
}
// NOTE: if we don't have sudo status, we still preserve the "pwmvalu" for echoing back to APP on V9
V8.on('write', function(param) {
      pwmvalu = param[0];   // preserve a copy for later   0 - 255
      if (sudo) blueled.pwmWrite(pwmvalu);
      console.log(pwmvalu);
});
// If pwm is set to 0 (off), then native LED/OUT control as per prev para can work.
// For pwm>0, pwm has precedence.


//--------------------------------

// a readback to APP of the above pwm led value (even if pwm is not running because of no sudo)

V9.on('read', function() {
  V9.write(pwmvalu);
});

//----------------------------

// APP reads RPI time


V10.on('read', function() {
  var d = new Date();
  var min  = d.getMinutes();
  min = (min < 10 ? "0" : "") + min;
  var sec  = d.getSeconds();
  sec = (sec < 10 ? "0" : "") + sec;
  V10.write(d.getHours() + ":" + min + ":" + sec);
});


//----------------------------

// GPS from APP

var lat1 = 0, lon1=0, distance = 0;

V11.on('write', function(param) {
  t = String(new Date()).slice(16,21);  
  console.log('GPS Lat:', param[0], " Long:", param[1], t);
  if(OL) {
      oled.clearDisplay();
      oled.setCursor(5,10);
      oled.writeString('Lat: ' + param[0].toString());
      oled.setCursor(5,40);
      oled.writeString("Lon: " + param[1].toString());
  }
  if (lat1 === 0) {
      lat1 = param[0];   // first gps reading sets lat1, lon1 the starting place
      lon1 = param[1];
  }
  else {
      distance = 1000*getDistanceFromLatLonInKm(lat1, lon1, param[0], param[1]);  // in metres
  }
});

function getDistanceFromLatLonInKm(lat1,lon1,lat2,lon2) {
  var R = 6371; // Radius of the earth in km
  var dLat = deg2rad(lat2-lat1);  // deg2rad below
  var dLon = deg2rad(lon2-lon1); 
  var a = 
    Math.sin(dLat/2) * Math.sin(dLat/2) +
    Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * 
    Math.sin(dLon/2) * Math.sin(dLon/2)
    ; 
  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); 
  var d = R * c; // Distance in km
  return d;
}

// http://stackoverflow.com/questions/18883601/function-to-calculate-distance-between-two-coordinates-shows-wrong
function deg2rad(deg) {
  return deg * (Math.PI/180)
}

//----------------------------

// APP reads GPS dist away from start


V12.on('read', function() {
  V12.write("GPS Dist: " + Math.round(distance) + " m");
});


//------------------------------------

// APP terminal to execute BASH commands at RPi

var exec = require('child_process').exec;  // for shell commands
V13.on('write', function(param) {
    
   try { 
       exec(param[0],
       function (error, stdout, stderr) {
          V13.write(stdout);
          V13.write(stderr);
       });
   }
   catch(err) {
       V13.write(err);
   }
});


//-------------------------------------

// APP terminal to execute Javascript commands at RPi nodejs interpreter

V14.on('write', function(param) {
    try {
        console.log(param[0]);
        v = eval(param[0]);
        if (typeof(v) === 'undefined') v=".";
        V14.write(v + "\n");
   }
   catch(err) {
       V14.write(err + "\n");
   }
});


//---------------------------------

// 3 values x/y/z from phone/tablet accelerometer
var ctr = 0;
V17.on('write', function(param) {
  //console.log('Accel:', param[0], param[1], param[2]);
  if(OL) { 
      if (ctr % 30 === 0) {  // try not overload oled function. display 1 in 30 readings
          oled.clearDisplay(false);   // delay display
          oled.setCursor(5,10);
          oled.writeString("X: "+ Math.round(100*param[0])/100,2, false, false);  // delay display
          oled.setCursor(5,30);
          oled.writeString("Y: "+ Math.round(100*param[1])/100,2, false, false);
          oled.setCursor(5,50);
          oled.writeString("Z: "+ Math.round(100*param[2])/100,2);   // now display
        }
      ctr++;
  }

});

//----------------------------------


// some stubs - "empty" functions needing you to code what you want to do (beyond printing to screen)


// "player" buttons at APP.  What to do with those button presses?
V16.on('write', function(param) {
  console.log('Player:', param[0]);
});


// APP terminal: write your own actions at RPI
V18.on('write', function(param) {
  console.log('V18 says:', param[0]); // print what came from APP
  V18.write("..\n");  // reply to APP

});


// Joystick
V20.on('write', function(param) {
  console.log('JoyStick:', param[0], param[1]);
});

//-----------------------------

// What about HC-SR04 ultrasonic sensor, or RC servo control?
// Possible with sudo and pigpio module: See https://github.com/fivdi/pigpio
